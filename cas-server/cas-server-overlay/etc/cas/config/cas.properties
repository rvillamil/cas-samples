#
# Thank's to: https://dacurry-tns.github.io/deploying-apereo-cas/
#

#
# ========================== Minimal Configuration  ===========================
#
#
# == Connect to a CAS server for authentication ==
#
# Identify the CAS server. name and prefix are always required settings.
# A CAS host is automatically appended to the ticket ids generated
# by CAS. If none is specified, one is automatically detected and used by CAS.
#
#cas.server.name=https://localhost:8443
cas.server.name=https://casdev.company.com:8443
cas.server.prefix=${cas.server.name}/cas

#
# == Configure ticket granting cookie encryption ==
#
# The CAS server uses a ticket granting cookie in the browser to maintain
# login state during single sign-on sessions.
# A client can present this cookie to CAS in lieu of primary credentials and,
# provided it is valid, will be authenticated.
# The contents of the cookie should be encrypted to protect them,
# and when running in a multi-node environment, all of the nodes
# must use the same keys
#
# Keys were generated with: https://mkjwk.org/
#
# @see https://goo.gl/JYgqbZ
#
cas.tgc.secure=true
cas.tgc.crypto.signing.key=oQtQOiJH674NSsSiYddSmA1TJcqbohvKMdGg09HXA7vV2H_qcsBORokXip5mqlSLxlMloQmDrrsTFsp6I2Jrkw
cas.tgc.crypto.encryption.key=e6ULpXY5SljUWngRFBc3M-iOTGPWXd8eu5ouiLfxfKQ

#
# == Configure Spring Webflow encryption ==
#
# CAS uses Spring Webflow to manage the authentication sequence,
# and this also needs to be encrypted
# @see https://goo.gl/JYgqbZ
#
cas.webflow.crypto.signing.key=upsW8AfZxLbW3ydSUqYU1VZ9E89HyvNEVt9vO5tzg41ofb18YLTjcBmLPM7FLa_K2TpHubxy0gSBNAbTGVd8MA
cas.webflow.crypto.encryption.key=2ieLvwvLmw1/YiruonkiVw==

#
# == Configure logging settings ==
#
# @see https://goo.gl/9kJtZm
#
logging.config=file:/etc/cas/config/log4j2.xml

#
# ========================== Service Registry ==================================
#
# = JSON Service Registry ==
#
# JSON fileName = serviceName + "-" + serviceNumericId + ".json"
cas.serviceRegistry.json.location=file:/etc/cas/services

#
# ========================== Monitoring ========================================
#
# = Configure admin pages properties

# Since we will NOT be using the Spring Boot Administration server in our
# deployment, the distinction is somewhat unimportant
#
# This will enable both the CAS-style endpoints and the Spring Boot-style
# endpoints.
# if an endpoint is marked 'sensitive' then Spring Security will be used to
# control access to it.
# If the endpoint is not marked \u201Csensitive\u201D then CAS will be used
# to secure it. Since we want to use the CAS server to secure all
# the endpoints, add the following properties:
cas.adminPagesSecurity.actuatorEndpointsEnabled=true
cas.monitor.endpoints.enabled=true
cas.monitor.endpoints.sensitive=false
endpoints.enabled=true
endpoints.sensitive=false

# IP address may be enough to protect all endpoints. If you wish to protect
# the admin pages via CAS itself, configure the rest.
cas.adminPagesSecurity.ip=127\.0\.0\.1

cas.adminPagesSecurity.loginUrl=${cas.server.prefix}/login
cas.adminPagesSecurity.service=${cas.server.prefix}/status/dashboard
cas.adminPagesSecurity.users=file:/etc/cas/config/admusers.properties

cas.adminPagesSecurity.adminRoles[0]=ROLE_ADMIN

#
# ========================== SAML2 IdP Support =================================
#
# The entityId parameter is the URL by which the IdP is known to clients (SPs).
# The scope parameter identifies the 'scope' in which attributes
# returned by the IdP apply; this is typically a DNS domain.
#
cas.authn.samlIdp.entityId=${cas.server.prefix}/idp
cas.authn.samlIdp.scope=localhost


#
# ========================== OpenID Connect ====================================
#
cas.authn.oidc.issuer=${cas.server.prefix}/oidc
cas.authn.oidc.jwksFile=file:/opt/cas/conf/oidc/keystore.jwks
cas.authn.oidc.scopes=openid,profile_rodrigo
cas.authn.oidc.claims=mail,\
firstname,username
cas.authn.oidc.userDefinedScopes.profile_rodrigo=mail,\
firstname,username
#cas.authn.oidc.claimsMap.firstname=firstname
#cas.authn.oidc.claimsMap.location=location
#cas.authn.oidc.claimsMap.centre=centre
#cas.authn.oidc.claimsMap.countryid=countryid
#cas.authn.oidc.claimsMap.credentialType=credentialType
#cas.authn.oidc.claimsMap.direction=direction


